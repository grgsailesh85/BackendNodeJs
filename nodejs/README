## node.js
- It is a runtime of JavaScript (JS).
- Runtime:- A program that runs another program
- Runs JS in local machine
- BUild in C++
- Google V8 engine for compiling
- Used for API, microservices, CLI, server side code

## Architecture
- Single threaded event-driven architecture
- NON-blocking I/O operation

## API
- HTTP methods
- Callbacks, promises, async/await
- modules (HTTP, file system, URL, path)
- Server

## HTTP Methods
- CRUD operation (Create, Read, Update, Delete)
1. GET (Read) 
2. POST (Create)
3. PUT (Update)
4. DELETE (Delete)

## Node.js modules
1. File System
2. Path
3. URL
4. Event
5. HTTP

## Express
- fast
- unopinionated
- minimalist web framework
- install express:-  npm install express

## status
1. 200 - range (range of 200, eg:- 201, 202, 203....) => Success
2. 400 - range => Error by client
3. 500 - range => Error by server

## package required for MERN
- npm install dotenv  // package to use variable of .env file
- npm install body-parser
- npm install mongoose
- npm install bcryptjs // hashing



## MongoDB
- Non-relational Database
- Collection (table)
- Document (Row)
- Field (Column)
- Schema :- Structure of Data
- Model :- usable format of schema


## MongoDB tools
- Shell -> Terminal
- Compass -> Local GUI
- Atlas -> Global URL 


## MongoDB Commands
1. mongosh  =>  Connect with local MongoDB instance
2. show dbs => show all database
3. cls => clear screen
4. use <dbname> => switch to a database or create new database if does not exist
5. show collections => show list of colections (table) in a database

users
id, name, age, address, phone
1, sailesh, 26, chitwan, 9811111
2, gurung, 25, null, null


## MongoDB Query
**Create**
1. insertOne
- db.<collectionName>.insertOne()
- for eg:- db.users.insertOne({name:"John"})
- db.users.insertOne({name:"Ram", age:25, address:"Chitwan"})

2. insertMany
- db.<collectionName>.insertMany()
- for eg:- db.users.insertMany([{name:"Sailesh"},{name:"Gurung"}])

**Read**
1. find()
- db.<collectionName>.find()
- for eg:- db.users.find()

2. find(<filterObject>)
- db.users.find({name:"John"})

**Update**
1. updateOne()
- db.<collectionName>.updateOne()
- for eg:- db.users.updateOne({name:"Ram"}, {$set: {age: 26}})

**Delete**
1. deleteOne()
- db.<collectionName>.deleteOne()
- for eg:- db.users.deleteOne({name:"Ram"})

**Complex Filter**
1. $gt/$gte => greater than or greater than equal to
- db.users.find({age: {$gt:20}})

2. $lt/$lte => lesser then or lesser then equal to
- db.users.find({age: {$lt:20}})

3. $eq/$ne => equal to or not equal to



## Encryption
- Hello -> asdafdajb : Encryption
- asdafdajb -> Hello : Decryption

## Hashing 
- One way encryption 
- Can not be converted back into original format i.e it cannot be decrypted back

## Salt 
- Extra addition character added to hash 

## JSON web token JWT